https://own2pwn.fr/elf-intro
https://man7.org/linux/man-pages/man1/nm.1.html
https://man7.org/linux/man-pages/man5/elf.5.html

https://docs.oracle.com/cd/E19683-01/816-1386/chapter6-94076/index.html

readelf [opciones] archivo
    -h (header)
    -l (encabezados de segmentos)
    -S (encabezados de secciones)
    -s (Tabla de simbolos)
    -r (relocalizacion)
    -t (detalles de las secciones)

objdump [opciones] archivo
    -h   (encabezado del archivo binario) 
    -d   (desensamblar código)
    -D   (desensamblar completo)
    -t   (tabla de símbolos)
    -r   (reubicaciones)
    -x   (detalles de las secciones)
    -s   (volcado en hexadecimal)
    -p   (dependencias)

hexdump [opciones] archivo
    -C   (estilo canónico: direcciones, hexadecimales y ASCII)
    -n   (mostrar solo los primeros N bytes)
    -s   (desplazar el inicio del volcado N bytes)
    -e   (especificar el formato de salida)
    -v   (mostrar todo sin comprimir, incluso repeticiones)
    -x   (mostrar en formato hexadecimal de 2 bytes)
    -b   (mostrar en formato binario)
    -o   (mostrar en formato octal)
    -c   (mostrar caracteres ASCII correspondientes)
    -p   (mostrar solo los bytes, sin direcciones ni ASCII)

nm -p <archivo>
https://docs.oracle.com/cd/E19683-01/816-1386/6m7qcoblh/index.html

https://docs.oracle.com/cd/E19120-01/open.solaris/819-0690/chapter6-43405/index.html
//La cabecera del archivo elh , contiene todos los datos del mismo
typedef struct {
        unsigned char   e_ident[EI_NIDENT]; //Los primeros bytes del archivo , contienen las palabras magicas https://docs.oracle.com/cd/E19120-01/open.solaris/819-0690/chapter6-35342/index.html
        Elf64_Half      e_type;             //Indica el tipo de archivo
        Elf64_Half      e_machine;
        Elf64_Word      e_version;
        Elf64_Addr      e_entry;
        Elf64_Off       e_phoff;            // La posicion del header de (Elf64_Phdr)la tabla del programa
        Elf64_Off       e_shoff;            // La posicion del header de (Elf64_Shdr) la tabla de secciones
        Elf64_Word      e_flags;
        Elf64_Half      e_ehsize;           //El tamaño del ELF header en bytes
        Elf64_Half      e_phentsize;
        Elf64_Half      e_phnum;            //El numero de secciones de Elf64_Phdr
        Elf64_Half      e_shentsize;
        Elf64_Half      e_shnum;            //El numero de secciones de Elf64_Shdr
        Elf64_Half      e_shstrndx;         //La tabla con el nombre de las secciones de Elf64_Shdr
} Elf64_Ehdr;


https://docs.oracle.com/cd/E19683-01/816-1386/chapter6-94076/index.html
//La cabecera de las secciones del archivo
typedef struct {
        Elf64_Word      sh_name;                //Nombre de la seccion
        Elf64_Word      sh_type;                //Tipo de seccion
        Elf64_Xword     sh_flags;
        Elf64_Addr      sh_addr;
        Elf64_Off       sh_offset;              //Indica el inicio de la seccion en bytes
        Elf64_Xword     sh_size;                //Indica el tamaño de la seccion en bytes
        Elf64_Word      sh_link;
        Elf64_Word      sh_info;
        Elf64_Xword     sh_addralign;
        Elf64_Xword     sh_entsize;             //Algunas secciones guardan el tamaño 
} Elf64_Shdr;

https://docs.oracle.com/cd/E19683-01/816-1386/chapter6-79797/index.html
typedef struct {
        Elf64_Word      st_name;                //tiene el indice para acceder al nombre para sacar el Elf64_Shdr del que sea sh_type == SHT_STRTAB
        unsigned char   st_info;                //Contiene el tipo de simbolo y sus "binding" atributos
        unsigned char   st_other;               //La visibilidad del simbolo
        Elf64_Half      st_shndx;               //Indica con que seccion tiene relacion
        Elf64_Addr      st_value;
        Elf64_Xword     st_size;                //El tamaño asociado
} Elf64_Sym;

st_info
(Bind)
STB_LOCAL       0 //Local symbol. These symbols are not visible outside the object file containing their definition.
STB_GLOBAL      1 //Global symbols. These symbols are visible to all object files being combined.
STB_WEAK        2 //Weak symbols. These symbols resemble global symbols, but their definitions have lower precedence.

(type)
STT_NOTYPE      0 //The symbol type is not specified.
STT_OBJECT      1 //This symbol is associated with a data object, such as a variable, an array, and so forth
STT_FUNC        2 //This symbol is associated with a function or other executable code.
STT_SECTION     3 //This symbol is associated with a section. Symbol table entries of this type exist primarily for relocation and normally have STB_LOCAL binding.
STT_FILE        4 //Conventionally, the symbol's name gives the name of the source file associated with the object file.
STT_COMMON      5 // This symbol labels an uninitialized common block. It is treated exactly the same as STT_OBJECT.

symbol posibilities
-A (Absolute)   The symbol's value is absolute, and will not be changed by further linking. 
-B/b            The symbol is in the BSS data section.
-C/c            The symbol is common.  Common symbols are uninitialized data.
-D/d            The symbol is in the initialized data section.
-G/g            The symbol is in the initialized data section for small objects.
-i              For PE format files this indicates that the symbol is in a section specific to the implementation of DLLs.
-"I"            The symbol is an indirect reference to another symbol.
-N              The symbol is a debugging symbol.
-p              The symbol is in a stack unwind section.
-R/r            The symbol is in a read only data section.
-S/s            The symbol is in an uninitialized or zero-initialized data section for small objects.
-T/t            The symbol is in the text (code) section.
-U              The symbol is undefined.
-u              The symbol is a unique global symbol.
-V/v            The symbol is a weak object.
-'W/w'          The symbol is a weak symbol that has not been specifically tagged as a weak object symbol
-'-'            The symbol is a stabs symbol in an a.out object file. 
- ?             The symbol type is unknown


FLAGS nm
• -a Display all symbols, even debugger-only symbols; normally these are not listed. 
• -g Display only external symbols.
• -u Display only undefined symbols (those external to each object file).
• -r Reverse the order of the sort (whether numeric or alphabetic); let the last come first. 
• -p Do not bother to sort the symbols in any order; print them in the order encountered. 

LC_COLLATE=C


B/b	.bss	Símbolos de datos no inicializados (BSS), globales o locales.
D/d	.data, .data1	Datos inicializados, globales o locales.
G/g	.rodata	Datos constantes, globales o locales.
T/t	.text	Funciones, globales o locales.
R/r	.rodata, .rodata1	Datos solo lectura, globales o locales.
U	-	Símbolo indefinido, no tiene una definición en el archivo.
g	.got	Símbolos globales pequeños en la tabla de desplazamiento global.
-	-	Símbolos de depuración (stabs en archivos a.out).